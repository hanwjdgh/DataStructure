#include <stdio.h>

int intcmp(const void *x, const void *y){
	return *(int*)x - *(int *)y;
}
int main(void){
	int arr[500001] = { 0, };
	int chk[8001] = { 0, };
	int N, key, idx, max = 0, cnt = 0, sum = 0;
	double avg, t_avg;
	int a, i, b;
	int t1, t2;
	scanf("%d", &N);
	for (a = 0; a < N; a++){
		scanf("%d", &arr[a]);
		chk[arr[a] + 4000]++;
		sum += arr[a];
	}
	qsort(arr, N, sizeof(int), intcmp);
	avg = (double)sum / (double)N;

	int cc_max = 2100000000;
	int cc_value = 0;
	int ccc_max = -2100000000;
	for (int i = 0; i < 8000; i++)    {
		if (chk[i] > ccc_max)
			ccc_max = chk[i];
	}
	int fff = 0;
	for (int i = 0; i < 8000; i++)    {
		if (chk[i] == ccc_max)        {
			cc_value = i - 4000;
			fff++;
			if (fff == 2)
				break;
		}
	}

	if (avg >= 0){
		t_avg = avg + 0.5;
		t1 = (int)t_avg;
		t2 = (int)avg;
		if (t1 > t2)        {
			avg = t2 + 1;
		}
		else if (t1 == t2)        {
			avg = t2;
		}
	}
	else    {
		t_avg = avg - 0.5;
		t1 = (int)t_avg;
		t2 = (int)avg;
		if (t1 < t2)        {
			avg = t2 - 1;
		}
		else if (t1 == t2)        {
			avg = t2;
		}
	}

	printf("%.0lf\n",avg);


	printf("%d\n", arr[(N + 1) / 2 - 1]);

	printf("%d\n", cc_value);


	printf("%d\n", arr[N - 1] - arr[0]);
	return 0;
}